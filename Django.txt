# What are templates in Django or Django template language
 - A Django template is a text document or a Python string marked-up using the Django template language.
Some constructs are recognized and interpreted by the template engine. 
The main ones are variables and tags. A template is rendered with a context.
Rendering replaces variables with their values, which are looked up in the context, and executes tags. 

# What are views in Django
 - Django views are Python functions that takes http requests and returns http response, like HTML documents.
A webpage that uses Django is full of views with different tasks and missions.
Views are usually put in a file called views.py located on your app's folder.

# What is Django ORM
 - Object Relational Mapper.
Send data between a database and models in an application.
ORM maps object attributes to fields of a table.
Advantage of using ORM is that it makes the entire development process fast and error-free and easier to change the database if needed . 
Essentially, it eliminates the need to write SQL code.
The data that is to be saved in fields will be automatically done by the ORM and the developer need not write SQL code for it.


# Define static files and explain their uses
 - Static files are files that don't change when your application is running.
These files do a lot to improve your application, but they aren't dynamically generated by your Python webserver like a usual HTML response.
common static files:
       Cascading Style Sheets, CSS
       JavaScript
       Images
django.contrib.staticfiles provides a convenience management command for gathering static files in a single directory so you can serve them easily.
This will copy all files from your static folders into the STATIC_ROOT directory. 
Use a web server of your choice to serve the files.


# What is Django  Django Rest Frameworke(DRF)
 - It is a powerful and flexible toolkit for building Web APIs.
Its main benefit is that it makes serialization(Django's serialization framework provides a mechanism for “translating” Django models into other formats) much easier.
Django REST framework is based on Django's class-based views, so it's an excellent option if you're familiar with Django.
Django Rest Framework (DRF) is the library used in Django to build RESTful APIs.
Django REST framework is based on Django's class-based views.


# What is django-admin and manage.py and explain its commands
 - django-admin is Django’s command-line utility for administrative tasks.
The django-admin script should be on your system path if you installed Django via pip. If it’s not in your path, ensure you have your virtual environment activated.
 -  manage.py is automatically created in each Django project.
It does the same thing as django-admin but also sets the DJANGO_SETTINGS_MODULE environment variable so that it points to your project’s settings.py file.
The difference is that it points towards the project's settings.py file.
This manage.py utility provides various commands that you must have while working with Django.
Generally, when working on a single Django project, it’s easier to use manage.py than django-admin.
If you need to switch between multiple Django settings files, use django-admin with DJANGO_SETTINGS_MODULE or the --settings command line option.


# What is Jinja templating
 - Jinja is a web template engine for the Python programming language, which allows you to generate text output from input data and a template.
The Jinja templating syntax provides a set of rules and constructs that define how the templating language should be used and how the output should be generated.
It is used to create HTML, XML or other markup formats that are returned to the user via an HTTP request.


#  What are Django URLs
 - Django, we use something called URLconf (URL configuration). URLconf is a set of patterns that Django will try to match the requested URL to find the correct view.
Create a file named urls.py in the same folder as the views.py file.
it gets user requests by URL locater and responds back.
To handle URL, django.urls module is used by the framework.

#  What is the difference between a project and an app in Django
 - A project refers to the entire application and all its parts.
A project in Django basically contains the configuration and setting related to the entire website.
A single project can also have multiple apps in it that can be used to implement some functionality.
 create a project in Django with this command:
       python manage.py startproject my_shopping_site
When we create a project, Django automatically generates a project directory with a python package in it, it also creates a manage.py file in the project directory.
A manage.py is a utility that is mainly used to interact with your project.
 - An app refers to a submodule of the project.It’s self-sufficient and not intertwined with the other apps in the project such that, in theory, you could pick it up and plop it down into another project without any modification.
An app typically has its own models.py (which might actually be empty). You might think of it as a standalone python module.
A simple project might only have one app.
you can refer to an app as a standalone python module that is used to provide some functionality to your project.
We can create multiple apps within a single Django project. And these apps can be independent of one another. Theoretically, we can use an app from one Django project to another without making any changes to it.
we can also use a project without adding any apps to it. But then, it will be an underutilization of a Django framework.


# What are different model inheritance styles in the Django
 - 1. Abstract Base Class Inheritance:
This style is used when you only want parents class to hold information that you don’t want to type out for each child model.
"No table for base class ,Only for derived class"
 2.Multi Table Model Inheritance:
This style is used if you are sub-classing an existing model and need each model to have its own database table.
"Create table for both base and derived class"
 3. Proxy Model Inheritance:
This style is used, if you only want to modify the Python level behaviour of the model, without changing the model’s fields.
You Inherit from base class and you can add your own properties except fields.
Base class should not be abstract class.
We can not use multiple inheritance in proxy models.
The main use of this is to overwrite the main functionalities of existing model.
It always query on original model with overridden methods.


#  What are models in Django
 - 

